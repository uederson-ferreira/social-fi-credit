// Code generated by the multiversx-sc proxy generator. DO NOT EDIT.

////////////////////////////////////////////////////
////////////////// AUTO-GENERATED //////////////////
////////////////////////////////////////////////////

#![allow(dead_code)]
#![allow(clippy::all)]

use multiversx_sc::proxy_imports::*;

pub struct DebtTokenProxy;

impl<Env, From, To, Gas> TxProxyTrait<Env, From, To, Gas> for DebtTokenProxy
where
    Env: TxEnv,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    type TxProxyMethods = DebtTokenProxyMethods<Env, From, To, Gas>;

    fn proxy_methods(self, tx: Tx<Env, From, To, (), Gas, (), ()>) -> Self::TxProxyMethods {
        DebtTokenProxyMethods { wrapped_tx: tx }
    }
}

pub struct DebtTokenProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    wrapped_tx: Tx<Env, From, To, (), Gas, (), ()>,
}

#[rustfmt::skip]
impl<Env, From, Gas> DebtTokenProxyMethods<Env, From, (), Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    Gas: TxGas<Env>,
{
    /// Inicializa o contrato com o endereço do controlador de empréstimos 
    /// Este é o único endereço que pode criar NFTs de dívida e mintar/queimar tokens 
    pub fn init<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
    >(
        self,
        loan_controller_address: Arg0,
    ) -> TxTypedDeploy<Env, From, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_deploy()
            .argument(&loan_controller_address)
            .original_result()
    }
}

#[rustfmt::skip]
impl<Env, From, To, Gas> DebtTokenProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    /// Emite o token de dívida como um NFT/SFT 
    /// Somente o proprietário do contrato pode chamar esta função 
    pub fn issue_debt_token(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("issueDebtToken")
            .original_result()
    }

    /// Cria um NFT para representar um empréstimo 
    /// Somente o controlador de empréstimos pode chamar esta função 
    pub fn create_debt_nft<
        Arg0: ProxyArg<u64>,
        Arg1: ProxyArg<ManagedAddress<Env::Api>>,
        Arg2: ProxyArg<BigUint<Env::Api>>,
        Arg3: ProxyArg<u64>,
        Arg4: ProxyArg<u64>,
    >(
        self,
        loan_id: Arg0,
        borrower: Arg1,
        amount: Arg2,
        interest_rate: Arg3,
        due_timestamp: Arg4,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, u64> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("createDebtNft")
            .argument(&loan_id)
            .argument(&borrower)
            .argument(&amount)
            .argument(&interest_rate)
            .argument(&due_timestamp)
            .original_result()
    }

    /// Queima o NFT quando o empréstimo é pago ou inadimplente 
    pub fn burn_debt_nft<
        Arg0: ProxyArg<u64>,
    >(
        self,
        loan_id: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("burnDebtNft")
            .argument(&loan_id)
            .original_result()
    }

    /// Cria novos tokens e os atribui ao destinatário 
    /// Somente o controlador de empréstimos pode chamar esta função 
    pub fn mint<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
        Arg1: ProxyArg<BigUint<Env::Api>>,
    >(
        self,
        recipient: Arg0,
        amount: Arg1,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("mint")
            .argument(&recipient)
            .argument(&amount)
            .original_result()
    }

    /// Destrói tokens do destinatário 
    /// Somente o controlador de empréstimos pode chamar esta função 
    pub fn burn<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
        Arg1: ProxyArg<BigUint<Env::Api>>,
    >(
        self,
        from: Arg0,
        amount: Arg1,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("burn")
            .argument(&from)
            .argument(&amount)
            .original_result()
    }

    /// Transfere tokens para outro endereço 
    pub fn transfer_tokens<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
        Arg1: ProxyArg<BigUint<Env::Api>>,
    >(
        self,
        to: Arg0,
        amount: Arg1,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("transferTokens")
            .argument(&to)
            .argument(&amount)
            .original_result()
    }

    /// Permite que outro endereço gaste tokens em seu nome 
    pub fn approve_tokens<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
        Arg1: ProxyArg<BigUint<Env::Api>>,
    >(
        self,
        spender: Arg0,
        amount: Arg1,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("approveTokens")
            .argument(&spender)
            .argument(&amount)
            .original_result()
    }

    /// Transfere tokens de um endereço para outro usando allowance 
    pub fn transfer_tokens_from<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
        Arg1: ProxyArg<ManagedAddress<Env::Api>>,
        Arg2: ProxyArg<BigUint<Env::Api>>,
    >(
        self,
        from: Arg0,
        to: Arg1,
        amount: Arg2,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("transferTokensFrom")
            .argument(&from)
            .argument(&to)
            .argument(&amount)
            .original_result()
    }

    /// Retorna o allowance concedido a um spender por um proprietário 
    pub fn get_allowance<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
        Arg1: ProxyArg<ManagedAddress<Env::Api>>,
    >(
        self,
        owner: Arg0,
        spender: Arg1,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, BigUint<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getAllowance")
            .argument(&owner)
            .argument(&spender)
            .original_result()
    }

    /// Aumenta o allowance concedido a um spender 
    pub fn increase_token_allowance<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
        Arg1: ProxyArg<BigUint<Env::Api>>,
    >(
        self,
        spender: Arg0,
        amount: Arg1,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("increaseTokenAllowance")
            .argument(&spender)
            .argument(&amount)
            .original_result()
    }

    /// Diminui o allowance concedido a um spender 
    pub fn decrease_token_allowance<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
        Arg1: ProxyArg<BigUint<Env::Api>>,
    >(
        self,
        spender: Arg0,
        amount: Arg1,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("decreaseTokenAllowance")
            .argument(&spender)
            .argument(&amount)
            .original_result()
    }

    /// Retorna o saldo de tokens de um endereço 
    pub fn balance_of<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
    >(
        self,
        address: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, BigUint<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("balanceOf")
            .argument(&address)
            .original_result()
    }

    /// Retorna a oferta total de tokens 
    pub fn total_token_supply(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, BigUint<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("totalTokenSupply")
            .original_result()
    }

    /// Retorna o ID do NFT de dívida associado a um empréstimo, ou zero se não existir 
    pub fn get_loan_nft_id<
        Arg0: ProxyArg<u64>,
    >(
        self,
        loan_id: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, u64> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getLoanNftId")
            .argument(&loan_id)
            .original_result()
    }

    /// Retorna o ID do empréstimo associado a um NFT, ou zero se não existir 
    pub fn get_nft_loan_id<
        Arg0: ProxyArg<u64>,
    >(
        self,
        nft_nonce: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, u64> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getNftLoanId")
            .argument(&nft_nonce)
            .original_result()
    }
}
